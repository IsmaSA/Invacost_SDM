###############################################################################
#################                 ALGORITHM             ######################
###############################################################################

gc()
setwd("C:/Users/isma-/OneDrive/Escritorio/SDM_Invacost")
suppressMessages({
  library(dplyr, quiet = TRUE, warn.conflicts = FALSE)
  library(reshape, quiet = TRUE, warn.conflicts = FALSE)
  library(ggplot2)
  library(tidyr)  
  library(stringr)
  library(invacost)
  library(biomod2)
  library(ggplot2)
  library(rgbif)
  library(gridExtra)
  library(raster)
  library(fasterize)
  library(sf)
  library(rasterVis)
  library(sp)
  library(mgcv)
  library(caret)
  library(pROC)
  library(xlsx)
  library(readxl)
  library(writexl)
  library(rgdal)
  library(devtools)
  Sys.setenv(LANGUAGE = "en")
})
### GAMs

set.seed(123)

sp <- read_xlsx("Species_ID.xlsx")
env <- read_xlsx("ID_predictors.xlsx")
background <- read_xlsx("pseudoabsences.xlsx")
all_cells <- read.csv2("All_cells_values.csv")


spn <- unique(sp$species)
spn<- spn[1:3]
n <- spn[1]

#We will need this to proyect the results
world_extent <- extent(-180, 179, -56, 84)
prediction_raster <- raster(world_extent, resolution = 0.08333333)

#To apply the mask
bio <- raster::getData('worldclim', var='bio', res=5)

#AUC
AUC_df <- data.frame(species = character(), auc = numeric(), stringsAsFactors = FALSE)
gam_models <- list()


for (n in spn) {
  sp1<- sp[sp$species == n,]
  sp1$presence <- 1
  
  if (nrow(sp1) < 10) {
    next  
  }
  
  #Combine data
  data <- bind_rows(sp1, background) # sp + background
  SDM_data<- right_join(env,data, by="cell.id") # + env data
  #SDM_data$presence <- ifelse(is.na(SDM_data$presence), 0, SDM_data$presence)
  
 #Split in train and evalutaion 
  indices <- sample(nrow(SDM_data))
  n_train <- round(0.7 * nrow(SDM_data))

  train_data <- SDM_data[indices[1:n_train], ]
  val_data <- SDM_data[indices[(n_train+1):nrow(SDM_data)], ]
  
  
  #Start modelling
  response<- train_data$presence
  predictors <- c("bioclim.bio2","bioclim.bio10", "bioclim.bio4", "Elevation", "Rugosity", "Slope")
   formula <- as.formula(paste("presence ~", paste0("s(", predictors, ", k = 5)", collapse = "+")))
  
  GAM_model <- gam(formula, data = train_data, family = binomial, select = TRUE)
  
  
  #Check concurvity:
  concurvity_threshold <- 0.8
  worst_concurvity <- 1 
  predictor_to_remove <- NULL  
  
  while (worst_concurvity >= concurvity_threshold) {
    predictors <- attr(terms(GAM_model), "term.labels")
    worst_concurvity <- 0
    
    for (predictor in predictors) {
      
      formula_temp <- update(formula, . ~ . - eval(parse(text = predictor)))
      GAM_model_temp <- gam(formula_temp, data = train_data, family = binomial, select = TRUE)
      
      resampled_data <- train_data
      resampled_data$presence <- sample(resampled_data$presence)
      
      # Fit the GAM model with the resampled data
      GAM_model_resampled <- gam(formula_temp, data = resampled_data, family = binomial, select = TRUE)
      
    
      concurvity_value <- concurvity(GAM_model_temp) - concurvity(GAM_model_resampled)
      worst_concurvity <- max(worst_concurvity, concurvity_value)
      
      if (worst_concurvity >= concurvity_threshold) {
        predictor_to_remove <- predictor
      }
    }
    
    if (!is.null(predictor_to_remove)) {
      
      formula <- update(formula, . ~ . - eval(parse(text = predictor_to_remove)))
      GAM_model <- gam(formula, data = train_data, family = binomial, select = TRUE)
    }
  }
  
  env_subset <- env[, predictors]
  
  #validation the model
  pred_probs <- predict(GAM_model, newdata = val_data, type = "response")
  auc<- roc(val_data$presence, pred_probs)$auc
  AUC_df <- rbind(AUC_df, data.frame(species = n, auc = auc))
  
  #combine the models
  gam_models[[n]] <- GAM_model
  combined_model <- combine(gam_models)
  
  gc()
  
  cat("GAM model -->",n, ":\n")
  
}  
  
  
gc()

# Combine the GAMs models and extract the prediction
combined_prediction_raster <- raster(prediction_raster)

for (i in seq_along(gam_models)) {
  GAM_model <- gam_models[[i]]
  
  prediction <- predict(GAM_model, newdata = env_subset, type = "response", na.action = "na.pass")
  
  prediction_matrix <- matrix(prediction, nrow = nrow(prediction_raster), ncol = ncol(prediction_raster), byrow = TRUE)
  
  prediction_raster <- raster(prediction_matrix, xmn = extent(prediction_raster)[1], xmx = extent(prediction_raster)[2],
                              ymn = extent(prediction_raster)[3], ymx = extent(prediction_raster)[4],
                              crs = projection(prediction_raster))
  
  combined_prediction_raster <- addLayer(combined_prediction_raster, prediction_raster)
}

#plot(combined_prediction_raster)


# Lets make weighted average for the ensemble model
weights <- AUC_df$auc / sum(AUC_df$auc)
weighted_ensemble_prediction <- function(models, weights, newdata) {
  predictions <- lapply(models, function(model) predict(model, newdata = newdata, type = "response",na.action = "na.pass"))
  weighted_prediction <- Reduce("+", Map("*", predictions, weights))
  return(weighted_prediction)
}


ensemble_prediction <- weighted_ensemble_prediction(gam_models, weights, env_subset)
prediction_matrix <- matrix(ensemble_prediction, nrow = nrow(prediction_raster), ncol = ncol(prediction_raster), byrow = TRUE)


prediction_raster <- raster(matrix(0, nrow = nrow(prediction_raster), ncol = ncol(prediction_raster)), xmn = world_extent@xmin, xmx = world_extent@xmax,
                            ymn = world_extent@ymin, ymx = world_extent@ymax, crs = "+proj=longlat")


prediction_matrix <- matrix(ensemble_prediction, nrow = nrow(prediction_raster), ncol = ncol(prediction_raster), byrow = TRUE)


values(prediction_raster) <- prediction_matrix

#Mask
bioclim_variable <- bio[[3]]
water_mask <- bioclim_variable > 0  
water_mask <- crop(water_mask, grid_extent) 
masked_prediction <- mask(prediction_raster, water_mask)


plot(masked_prediction) # The final plot :-)
  
  

  
  
  
  
  
  





  
  
  
  
  
  #Plot
  cl <- colorRampPalette(c('gray90','gray75','gray65','gray50','gray30'))
  breaks <- seq(0, 1, by = 0.2)
  
  levelplot(masked_prediction, col.regions = cl, margin = FALSE,
            at = breaks,
            panel = function(...) {
              panel.levelplot(...)
              map("world", add = TRUE, col = "green", fill = FALSE, lwd = 0.5)
            })

}









summary(GAM_model)
op <- par(mfrow=c(2,2), mar=c(4,4,1,1))
gam.check(GAM_model)
par(op)
op <- par(mfrow=c(3,3), mar=c(4,4,1,1))
plot(GAM_model, all.terms = TRUE, rug=TRUE, shade= TRUE, shade.col = "lightblue", seWithMean = TRUE, residuals=TRUE)
par(op)









color_palette <- viridis(5)

# Convert raster to a data frame
df <- as.data.frame(masked_prediction, xy = TRUE)
ggplot() +
  geom_tile(data = df, aes(x = x, y = y, fill = layer), width = 1, height = 1) +
  scale_fill_gradientn(colors = color_palette) +
  theme_void() +
  borders("world", colour = "lightgray", fill = NA)








