
##########################################################################################
#                                    GAM MODELS
##########################################################################################

# Option A 
env <- read_xlsx("ID_predictors.xlsx")

background1 <- read_xlsx("bg_cells_all.xlsx")
background2 <- read_xlsx("bg_cells_amph.xlsx")
background3 <- read_xlsx("bg_cells_arth.xlsx")
background4 <- read_xlsx("bg_cells_mammals.xlsx")
background5 <- read_xlsx("bg_cells_plants.xlsx")
background6 <- read_xlsx("bg_cells_reptiles.xlsx")

predictors_bg <- read_xlsx("predictors_bg.xlsx")


spn <- unique(invacost$Species)
n <- spn[1]

#We will need this to proyect the results
world_extent <- extent(-180, 179, -56, 84)
prediction_raster <- raster(world_extent, resolution = 0.08333333)
grid_extent <- extent(-180, 179, -56, 84)

#To apply the mask
bio <- raster::getData('worldclim', var='bio', res=5)
#Note: bioc is in collinearity script

#AUC - not for now
AUC_df <- data.frame(species = character(), auc = numeric(), stringsAsFactors = FALSE)

#Folders directory
folder_a <- "Raster_model"  # Folder to save raster files
folder_b <- "PDF_plot"  # Folder to save plot PDFs

# Create the folders if they don't exist
dir.create(folder_a, showWarnings = FALSE)
dir.create(folder_b, showWarnings = FALSE)


predictors <- c("bioclim.bio2","bioclim.bio3", "bioclim.bio8","bioclim.bio9","bioclim.bio13","bioclim.bio14","bioclim.bio15","bioclim.bio18","bioclim.bio19", "Elevation", "Slope","Roads")
names(bioc) <- c("bioclim.bio2","bioclim.bio3", "bioclim.bio8","bioclim.bio9","bioclim.bio13","bioclim.bio14","bioclim.bio15","bioclim.bio18","bioclim.bio19", "Elevation", "Slope","Roads")


#----
folder_path <- "C:/Users/isma-/OneDrive/Escritorio/SDM_Invacost/Background_points/PDF_plot"  # Replace with the path to your folder
file_names <- list.files(folder_path)
species_names <- gsub("^plot_|\\.pdf$", "", file_names)
species_names


for (n in spn) {
  sp1<- invacost[invacost$species == n,]
  sp1$presence <- 1
  
  if (nrow(sp1) < 10) {
    next  
  }
  
  #Species data + env data
  sp1_env <- right_join(env,sp1, by= "cell.id")  
  
  #Background data + env data
  if ("Plants" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background5, by="cell.id")  # bg PLANTS
    
  } else if ("Arthropods" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background3, by="cell.id")  # bg Arthropods
    
  } else if ("All_density" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background1, by="cell.id")  # bg All_density
    
  } else if ("Reptilia" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background6, by="cell.id")  # bg Reptilia
    
  } else if ("Mammalia" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background4, by="cell.id")  # bg Mammalia
    
  } else if ("Amphibia" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background2, by="cell.id")  # bg Amphibia
  }
  
  
  SDM_data<- bind_rows(sp1_env,data) # presence + bg
  
  SDM_data$presence <- ifelse(is.na(SDM_data$presence), 0, SDM_data$presence)
  
  #Additional step to retain full variables with predictors in case is needed:
  SDM_data <- SDM_data[complete.cases(SDM_data$bioclim.bio1), ]
  
  SDM_data$presence <- as.factor(SDM_data$presence)
  
  #Split in train and evalutaion --> Not for now
  #indices <- sample(nrow(SDM_data))
  #n_train <- round(0.7 * nrow(SDM_data))
  
  #train_data <- SDM_data[indices[1:n_train], ]
  #val_data <- SDM_data[indices[(n_train+1):nrow(SDM_data)], ]
  
  
  #Start modelling
  response<- SDM_data$presence
  predictors <- c("bioclim.bio2","bioclim.bio3", "bioclim.bio8","bioclim.bio9","bioclim.bio13","bioclim.bio14","bioclim.bio15","bioclim.bio18","bioclim.bio19", "Elevation", "Slope","Roads")
  formula <- as.formula(paste("presence ~", paste0("s(", predictors, ", k = 5)", collapse = "+")))
  
  GAM_model <- gam(formula, data = SDM_data, family = binomial, select = TRUE)
  
  #  #Check concurvity:
    concurvity_threshold <- 0.8
  worst_concurvity <- 1 
  predictor_to_remove <- NULL  
  
    while (worst_concurvity >= concurvity_threshold) {
      predictors <- attr(terms(GAM_model), "term.labels")
      worst_concurvity <- 0
      
      for (predictor in predictors) {
        
       formula_temp <- update(formula, . ~ . - eval(parse(text = predictor)))
       GAM_model_temp <- gam(formula_temp, data = SDM_data, family = binomial, select = TRUE)
       
       resampled_data <- SDM_data
        resampled_data$presence <- sample(resampled_data$presence)
       
       # Fit the GAM model with the resampled data
       GAM_model_resampled <- gam(formula_temp, data = resampled_data, family = binomial, select = TRUE)
       
    
       concurvity_value <- concurvity(GAM_model_temp) - concurvity(GAM_model_resampled)
       worst_concurvity <- max(worst_concurvity, concurvity_value)
      
       if (worst_concurvity >= concurvity_threshold) {
        predictor_to_remove <- predictor
       }
     }
    
    if (!is.null(predictor_to_remove)) {
      
      formula <- update(formula, . ~ . - eval(parse(text = predictor_to_remove)))
       GAM_model <- gam(formula, data = train_data, family = binomial, select = TRUE)
    }
   }
  
  gc()
  
  cat("GAM model -->",n, ":\n")
  
  
  prediction <- predict(GAM_model, newdata = as.data.frame(bioc), type = "response", na.action = "na.pass")
  #range(prediction, na.rm = T)
  
  prediction_matrix <- matrix(prediction, nrow = ncol(bioc), ncol = nrow(bioc))
  prediction_matrix<- t(prediction_matrix)
  
  prediction_raster <- raster(prediction_matrix, xmn = extent(bioc)[1], xmx = extent(bioc)[2],
                              ymn = extent(bioc)[3], ymx = extent(bioc)[4],
                              crs = projection(bioc))
  
  values(prediction_raster) <- prediction_matrix
  
  
  #validation the model ---------------------------    (Not for now)
  #pred_probs <- prediction
  
  #binary_predictions <- ifelse(predicted_probs > 0.7, 1, 0)
  
  #auc<- roc(binary_predictions, pred_probs, na.rm=T)$auc
  #AUC_df <- rbind(AUC_df, data.frame(species = n, auc = auc))
  
  
  
  # Lets save prediction raster as a file
  prediction_file <- file.path(folder_a, paste0("prediction_", n, ".tif")) 
  writeRaster(prediction_raster, filename = prediction_file, format = "GTiff", overwrite=TRUE)
  
  
  plot_file <- file.path(folder_b, paste0("plot_", n, ".pdf"))  # Save in folder B
  
  pdf(plot_file)
  plot(prediction_raster, main = n)
  
  dev.off()
  gc()
  cat("Plot -->",n, ":\n")
}









# Option B


sp <- read_xlsx("Species_ID.xlsx")
env <- read_xlsx("ID_predictors.xlsx")
background <- read_xlsx("pseudoabsences.xlsx")
all_cells <- read.csv2("All_cells_values.csv")


spn <- unique(sp$species)
spn<- spn[1:3]
n <- spn[1]

#We will need this to proyect the results
world_extent <- extent(-180, 179, -56, 84)
prediction_raster <- raster(world_extent, resolution = 0.08333333)

#To apply the mask
bio <- raster::getData('worldclim', var='bio', res=5)

#AUC
AUC_df <- data.frame(species = character(), auc = numeric(), stringsAsFactors = FALSE)
gam_models <- list()


for (n in spn) {
  sp1<- sp[sp$species == n,]
  sp1$presence <- 1
  
  if (nrow(sp1) < 10) {
    next  
  }
  
  #Species data + env data
  sp1_env <- right_join(env,sp1, by= "cell.id")  # bg PLANTS
  
  #Background data + env data
  if ("Plants" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background5, by="cell.id")  # bg PLANTS
    
  } else if ("Arthropods" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background3, by="cell.id")  # bg Arthropods
    
  } else if ("All_density" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background1, by="cell.id")  # bg All_density
    
  } else if ("Reptilia" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background6, by="cell.id")  # bg Reptilia
    
  } else if ("Mammalia" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background4, by="cell.id")  # bg Mammalia
    
  } else if ("Amphibia" %in% unique(sp1$Order)) {
    data <- right_join(predictors_bg, background2, by="cell.id")  # bg Amphibia
  }
  
  
  SDM_data<- bind_rows(sp1_env,data) # presence + bg
  
  SDM_data$presence <- ifelse(is.na(SDM_data$presence), 0, SDM_data$presence)
  
  #Additional step to retain full variables with predictors:
  SDM_data <- SDM_data[complete.cases(SDM_data$bioclim.bio1), ]
  
  SDM_data$presence <- as.factor(SDM_data$presence)
  
 #Split in train and evalutaion --> Not for now
  #indices <- sample(nrow(SDM_data))
  #n_train <- round(0.7 * nrow(SDM_data))

  #train_data <- SDM_data[indices[1:n_train], ]
  #val_data <- SDM_data[indices[(n_train+1):nrow(SDM_data)], ]
  
  
  #Start modelling
  response<- SDM_data$presence
  predictors <- c("bioclim.bio2","bioclim.bio3", "bioclim.bio8","bioclim.bio9","bioclim.bio13","bioclim.bio14","bioclim.bio15","bioclim.bio18","bioclim.bio19", "Elevation", "Slope","Roads")
  formula <- as.formula(paste("presence ~", paste0("s(", predictors, ", k = 5)", collapse = "+")))
  
  GAM_model <- gam(formula, data = SDM_data, family = binomial, select = TRUE)
  
  #  #Check concurvity:
  #  concurvity_threshold <- 0.8
  #worst_concurvity <- 1 
  #predictor_to_remove <- NULL  
  
  #  while (worst_concurvity >= concurvity_threshold) {
  #    predictors <- attr(terms(GAM_model), "term.labels")
  #    worst_concurvity <- 0
  #    
  #    for (predictor in predictors) {
  #      
  #     formula_temp <- update(formula, . ~ . - eval(parse(text = predictor)))
  #     GAM_model_temp <- gam(formula_temp, data = SDM_data, family = binomial, select = TRUE)
  #     
  #     resampled_data <- SDM_data
  #      resampled_data$presence <- sample(resampled_data$presence)
  #     
  #     # Fit the GAM model with the resampled data
  #     GAM_model_resampled <- gam(formula_temp, data = resampled_data, family = binomial, select = TRUE)
  #     
  #   
  #     concurvity_value <- concurvity(GAM_model_temp) - concurvity(GAM_model_resampled)
  #     worst_concurvity <- max(worst_concurvity, concurvity_value)
  #    
  #     if (worst_concurvity >= concurvity_threshold) {
  #      predictor_to_remove <- predictor
  #     }
  #   }
  #  
  #  if (!is.null(predictor_to_remove)) {
  #    
  #    formula <- update(formula, . ~ . - eval(parse(text = predictor_to_remove)))
  #     GAM_model <- gam(formula, data = train_data, family = binomial, select = TRUE)
  #  }
  # }
  
  

  gc()
  
  cat("GAM model -->",n, ":\n")

#plot(bioc[[1]])


prediction <- predict(GAM_model, newdata = as.data.frame(bioc), type = "response", na.action = "na.pass")
#range(prediction, na.rm = T)

prediction_matrix <- matrix(prediction, nrow = ncol(bioc), ncol = nrow(bioc))
prediction_matrix<- t(prediction_matrix)

prediction_raster <- raster(prediction_matrix, xmn = extent(bioc)[1], xmx = extent(bioc)[2],
                            ymn = extent(bioc)[3], ymx = extent(bioc)[4],
                            crs = projection(bioc))

values(prediction_raster) <- prediction_matrix


#validation the model ---------------------------    (Not for now)
#pred_probs <- prediction

#binary_predictions <- ifelse(predicted_probs > 0.7, 1, 0)

#auc<- roc(binary_predictions, pred_probs, na.rm=T)$auc
#AUC_df <- rbind(AUC_df, data.frame(species = n, auc = auc))

 ## Cross validation 
  
  numFolds <- trainControl(method = "cv", number = 5)
  cvFolds <- createFolds(train_data$presence, k = 5)
  
  tss <- vector()
  auc <- vector()
  #folds
  for(i in 1:5){
    
    # Partition the data
    trainIndex <- cvFolds[[i]]
    cvTrainData <- train_data[trainIndex, ]
    cvTestData <- train_data[-trainIndex, ]
    
    # Fit the model
    GAM_model <- gam(presence ~ s(bioclim.bio2, k = 5) + s(bioclim.bio3, k = 5) + 
                       s(bioclim.bio8, k = 5) + s(bioclim.bio9, k = 5) + s(bioclim.bio13, 
                                                                           k = 5) + s(bioclim.bio14, k = 5) + s(bioclim.bio15, k = 5) + 
                       s(bioclim.bio18, k = 5) + s(bioclim.bio19, k = 5) + s(Elevation, 
                                                                             k = 5) + s(Slope, k = 5) + s(Roads, k = 5), 
                     family = binomial(link = 'logit'), 
                     data = cvTrainData)
    
    # Make predictions
    pred <- predict(GAM_model, newdata = cvTestData, type = "response")
    
    # Compute AUC and store it
    roc_obj <- roc(cvTestData$presence, pred)
    auc[i] <- auc(roc_obj)
    
    
    pred_class <- ifelse(pred > 0.5, 1, 0)  # Adjust the threshold if needed

    # Compute confusion matrix
    cm <- confusionMatrix(as.factor(pred_class), as.factor(cvTestData$presence))
    
    # Calculate Sensitivity and Specificity
    sensitivity <- cm$table[2, 2] / (cm$table[2, 2] + cm$table[1, 2])
    specificity <- cm$table[1, 1] / (cm$table[1, 1] + cm$table[2, 1])
    
    # Calculate TSS and store it
    tss[i] <- sensitivity + specificity - 1
    cat("*")
  }
  AUC_df <- rbind(AUC_df, data.frame(species = n, mean_auc = mean(auc),sd_auc = sd(auc),
                                                 mean_tss = mean(tss), sd_tss = sd(tss) ))
}
AUC_df <- rbind(AUC_df, data.frame(species = n, auc = mean(auc)))





# Lets save prediction raster as a file
prediction_file <- file.path(folder_a, paste0("prediction_", n, ".tif")) 
writeRaster(prediction_raster, filename = prediction_file, format = "GTiff", overwrite=TRUE)


plot_file <- file.path(folder_b, paste0("plot_", n, ".pdf"))  # Save in folder B

pdf(plot_file)
plot(prediction_raster, main = n)

dev.off()
gc()
cat("Plot -->",n, ":\n")
}

